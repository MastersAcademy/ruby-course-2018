Prelude
Role models are important. 
-- Officer Alex J. Murphy / RoboCop

One thing has always bothered me as a Ruby developer—Python developers have a great programming style reference (PEP-8) and we never got an official guide, documenting Ruby coding style and best practices. And I do believe that style matters. I also believe that a great hacker community, such as Ruby has, should be quite capable of producing this coveted document.

This guide started its life as our internal company Ruby coding guidelines (written by yours truly). At some point I decided that the work I was doing might be interesting to members of the Ruby community in general and that the world had little need for another internal company guideline. But the world could certainly benefit from a community-driven and community-sanctioned set of practices, idioms and style prescriptions for Ruby programming.

Since the inception of the guide I've received a lot of feedback from members of the exceptional Ruby community around the world. Thanks for all the suggestions and the support! Together we can make a resource beneficial to each and every Ruby developer out there.

By the way, if you're into Rails you might want to check out the complementary Ruby on Rails Style Guide.

The Ruby Style Guide
This Ruby style guide recommends best practices so that real-world Ruby programmers can write code that can be maintained by other real-world Ruby programmers. A style guide that reflects real-world usage gets used, while a style guide that holds to an ideal that has been rejected by the people it is supposed to help risks not getting used at all—no matter how good it is.

The guide is separated into several sections of related rules. I've tried to add the rationale behind the rules (if it's omitted I've assumed it's pretty obvious).

I didn't come up with all the rules out of nowhere—they are mostly based on my extensive career as a professional software engineer, feedback and suggestions from members of the Ruby community and various highly regarded Ruby programming resources, such as "Programming Ruby" and "The Ruby Programming Language".

There are some areas in which there is no clear consensus in the Ruby community regarding a particular style (like string literal quoting, spacing inside hash literals, dot position in multi-line method chaining, etc.). In such scenarios all popular styles are acknowledged and it's up to you to pick one and apply it consistently.

This style guide evolves over time as additional conventions are identified and past conventions are rendered obsolete by changes in Ruby itself.

You can generate a PDF or an HTML copy of this guide using Pandoc.

RuboCop is a static code analyzer (linter) and formatter, based on this style guide.

Translations of the guide are available in the following languages:

Chinese Simplified
Chinese Traditional
Egyptian Arabic
French
Japanese
Korean
Portuguese (pt-BR)
Russian
Spanish
Vietnamese

Table of Contents
Source Code Layout
Syntax
Naming
Comments
Comment Annotations
Magic Comments
Classes & Modules
Exceptions
Collections
Numbers
Strings
Date & Time
Regular Expressions
Percent Literals
Metaprogramming
Misc
Tools
Source Code Layout

Nearly everybody is convinced that every style but their own is ugly and unreadable. Leave out the "but their own" and they're probably right... 
-- Jerry Coffin (on indentation)

Spread the Word
A community-driven style guide is of little use to a community that doesn't know about its existence. Tweet about the guide, share it with your friends and colleagues. Every comment, suggestion or opinion we get makes the guide just a little bit better. And we want to have the best possible guide, don't we?

Cheers,
Bozhidar
