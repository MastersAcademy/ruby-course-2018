require './config/initializers/database'

namespace :db do
  desc "Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases."
  task :create do
    ActiveRecord::Base.establish_connection(DB_CONFIG.except('database'))
    ActiveRecord::Base.connection.create_database(DB_CONFIG["database"])
    puts "Database created."
  end

  desc "Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)."
  task :migrate do
      ActiveRecord::Tasks::DatabaseTasks.migrate
      Rake::Task["db:schema"].invoke
  end

  desc "Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)."
  task :rollback do
    ActiveRecord::Base.connection.migration_context.rollback(1)
    Rake::Task["db:schema"].invoke
  end

  desc 'Create a db/schema.rb file that is portable against any DB supported by AR'
  task :schema do
    require 'active_record/schema_dumper'
    filename = "db/schema.rb"
    File.open(filename, "w:utf-8") do |file|
      ActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, file)
    end
  end
end

namespace :g do
  desc "Generate migration"
  task :migration do
    migration_class = ARGV[1]
    migration_name = migration_class.tableize
    timestamp = Time.now.strftime("%Y%m%d%H%M%S")
    path = File.expand_path("../db/migrate/#{timestamp}_#{migration_name}.rb", __FILE__)


    content = <<-RUBY
class #{migration_class} < ActiveRecord::Migration[5.1]
  def up
  end

  def down
  end
end
    RUBY
    File.write(path, content)
    puts "Migration #{path} created"
    abort # needed stop other tasks
  end
end